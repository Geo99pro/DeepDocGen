import os
from random import *
from typing import Union
from src.Synthetic_document_pipeline.content_generator.content_src.config.margin import Margin

def get_perc_value(size, perc):
    return size * perc / 100

def norm(size, value):
    return value * 100 / size

def random_enable(prob=50):
    return randint(0, 100) <= prob

def random_color(param="RGB"):
    cmin, cmax = 50, 205
    return (randint(cmin, cmax), 
            randint(cmin, cmax), 
            randint(cmin, cmax))

def gauss_rdist(vmin, vmax, mean=None, devp=None, ndigits=None):
    if mean is None:
        mean = (vmax + vmin) / 2
    if devp is None:
        devp = abs(vmax - vmin) / 6

    val = gauss(mean, devp)
    while not vmin < val < vmax:
        val = gauss(mean, devp)
    return round(val, ndigits)

def beta_rdist_old(vmin, vmax, mean=None, devp=None, ndigits=None):
    """This function is the old version of the function beta_rdist
    """
    if mean is None:
        mean = (vmax + vmin) / 2
    if devp is None:
        devp = abs(vmax - vmin) / 6
    v = (mean*(1 - mean) - devp) / devp
    betavar = betavariate(abs(mean*v), abs((1 - mean)*v))

    return round(betavar*abs(vmax - vmin) + vmin, ndigits)

def beta_rdist(vmin: Union[int, float], vmax: Union[int, float], ndigits=None):
    """This function returns the grounded value on the scale vmin to vmax, resulting from a certain probability value generated by the beta function, knowing that beta element of [0, 1].

    Args: 
    - vmin = minimal value
    - vmax = maximal value
    - ndigits = number of digits after the comma. Set at None

    Ex : print(betavar) = 0.4837054287181419
        round(betavar*abs(vmax - vmin) + vmin, ndigits) = 7.41853
    """
    betavar = betavariate(5, 5)
    return round(betavar*abs(vmax - vmin) + vmin, ndigits)

def generate_random_margins(margin: Margin, width, height):
    margin_list = [norm(height, beta_rdist(*margin.top)),
                    norm(width, beta_rdist(*margin.left)), 
                    norm(height, beta_rdist(*margin.bottom)), 
                    norm(width, beta_rdist(*margin.right))]
    return Margin.from_list(margin_list)


def random_number(val=None, mean=None, devp=None, ndigits=None):
    ''' 
    This function generate (or return) a random number based on the input parameters more specificaly his type.

    Args: 
    - val: type None or float int or tuple or list
    - mean (Nb: not used actually): must be the mean value of the distribution
    - devp (Nb: not used actually): must be the standard deviation of the distribution
    - ndigits: type int, represent the number of float value after the comma
    '''
    if val is None or val == 0:
        return beta_rdist(1, 100, ndigits)
        #return beta_rdist(1, 100, mean, devp, ndigits)
    elif type(val) in [int, float]: 
        return val
    elif type(val) in [tuple, list] and len(val) > 1:
        return beta_rdist(val[0], val[1], ndigits)
    else:
        raise Exception("the presented value type is invalid.")

def random_str(val: type = tuple or list):
    """This function returns a choice of value (font) from a list or tuple. 

    Args: 
    val: must be tuple or list or just a string which represents fonts

    val = ["arial", "courier", "opensans", "raleway", "roboto", "times", "calibri"]
    Ex of return: opensans
    """
    if val is None:
        return
    if type(val) in [tuple, list]:
        return choice(val)
    elif type(val) == str:
        return val
    else:
        raise Exception("the presented value type is invalid.")


def get_random_text_file(text_paths, language):
    path = os.path.join(text_paths, language)
    files = [os.path.join(path, file) for file in os.listdir(path)]
    if files == []: raise Exception("No text file found in {}.".format(path))
    return choice(files)

def get_random_image_file(image_dict, image_type='figure'):
    # path = os.path.join(image_path, image_type)
    # files = [os.path.join(path, file) for file in os.listdir(path)]
    if image_dict[image_type] == []: raise Exception("No image file found from type {}.".format(image_type))
    # chosen_path = choice(files)
    # if not os.path.isfile(chosen_path):
    #     chosen_path = choice([os.path.join(chosen_path, file) for file in os.listdir(chosen_path)])
    return choice(image_dict[image_type])
    
def get_random_image(image_dict, image_lengths_dict, image_type='figure'):
    return image_dict[image_type][randint(0, image_lengths_dict[image_type])]

def rand_gauss(range=(0,1)):
    """
    range -> (min%, max%)\n
    value -> number from which the random value is extracted
    """
    min_ = min(range)
    max_ = max(range)

    mean = ( (max_-min_)/2 ) + min_
    desv = (max_-min_)/6

    val = gauss(mean, desv)
    while val > max_ or val < min_:
        val = gauss(mean, desv)
    
    return val


def random_color(param):
    if param == "RGBA":
        return (randint(50,205), randint(50,205), randint(50,205), 255)
    else:
        return (randint(50,205), randint(50,205), randint(50,205))
